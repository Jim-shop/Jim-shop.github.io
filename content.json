{"meta":{"title":"Jim_shop","subtitle":"Github pages","description":"Jim_shop's Github pages.","author":"Jim_shop","url":"https://jim-shop.github.io","root":"/"},"pages":[{"title":"Tags","date":"2022-03-07T02:25:16.000Z","updated":"2022-03-07T02:25:45.245Z","comments":true,"path":"tags/index.html","permalink":"https://jim-shop.github.io/tags/","excerpt":"","text":""},{"title":"Categories","date":"2022-03-07T02:28:41.000Z","updated":"2022-03-07T02:29:03.689Z","comments":true,"path":"categories/index.html","permalink":"https://jim-shop.github.io/categories/","excerpt":"","text":""},{"title":"Search","date":"2022-03-07T02:29:20.000Z","updated":"2022-03-07T02:29:34.121Z","comments":true,"path":"search/index.html","permalink":"https://jim-shop.github.io/search/","excerpt":"","text":""}],"posts":[{"title":"双叉积公式","slug":"大物用到的向量叉乘性质","date":"2022-03-07T02:36:16.000Z","updated":"2022-03-07T02:50:18.489Z","comments":true,"path":"2022/03/07/大物用到的向量叉乘性质/","link":"","permalink":"https://jim-shop.github.io/2022/03/07/%E5%A4%A7%E7%89%A9%E7%94%A8%E5%88%B0%E7%9A%84%E5%90%91%E9%87%8F%E5%8F%89%E4%B9%98%E6%80%A7%E8%B4%A8/","excerpt":"","text":"双叉积公式$\\overrightarrow{a}\\times(\\overrightarrow{b}\\times\\overrightarrow{c})=\\overrightarrow{b}\\times(\\overrightarrow{a}\\cdot\\overrightarrow{c})-\\overrightarrow{c}\\times(\\overrightarrow{a}\\cdot\\overrightarrow{b})$","categories":[],"tags":[]},{"title":"Git协作开发指南","slug":"Git协作开发指南","date":"2022-03-06T18:17:31.000Z","updated":"2022-03-07T02:17:46.504Z","comments":true,"path":"2022/03/07/Git协作开发指南/","link":"","permalink":"https://jim-shop.github.io/2022/03/07/Git%E5%8D%8F%E4%BD%9C%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/","excerpt":"","text":"Git协作开发指南以命令行讲解为主。 现在有很多Git的图形界面客户端，和敲命令行原理上是一样的，只是把输命令的过程给做成了一个个按钮。 概述使用Git进行协作开发的流程一般是 首先从远程服务器拉取最新的主分支 从主分支创建本地新分支，切换到这个新分支上 按常规的方式进行开发 新分支开发有了进展，在新分支内本地提交 开发测试正常后，切换到主分支，整合，推送 1. 拉取12cd 刚克隆下来的仓库路径/git pull 2. 创建并切换到新分支12cd 刚克隆下来的仓库路径/git checkout -b 新分支名（自拟） 3. 开发切换分支后，先暂时不用管Git，直接按照常规的方法进行开发就行了，不认识Git的时候怎么开发，现在就怎么开发。 4. 提交12cd 刚克隆下来的仓库路径/git commit -a 需要提交的文件/目录 -m &quot;关于本次提交的说明（自拟）&quot; 这样就把开发的成果保存到Git版本管理库中了。 需要提交的文件/目录应该有哪些？ 应该只有源代码。你编译出的内容一是可能存在兼容性问题，比如只能在你的电脑上执行，其他电脑上会出现问题，二是为了保持仓库简洁，出于这两点原因，请不要上传。 但是每次手敲文件好麻烦呀！ 其实可以把不需要提交的文件/目录名添加到仓库根目录下的.gitignore文件中，这样这些文件就会被Git忽略。于是就可以使用这条命令： 1git commit -a -m &quot;关于本次提交的说明（自拟）&quot; 把需要提交的文件/目录省略，这代表仓库根目录。这样Git就会把.gitignore文件中记录的文件/目录之外的所有文件添加到Git版本管理库中。 5. 推送开发测试正常后，可以切换到主分支，整合，推送。 1234cd 刚克隆下来的仓库路径/git checkout mastergit merge 之前自拟的新分支名git push 其实不切换到主分支，直接从新分支上向远程推送也是可以的，命令请查阅Git帮助。但是一般来说整合到主分支推送会更方便一点。","categories":[],"tags":[]},{"title":"GITignore文件编写方法","slug":"GITignore文件编写方法","date":"2022-03-06T18:16:49.000Z","updated":"2022-03-07T02:17:01.312Z","comments":true,"path":"2022/03/07/GITignore文件编写方法/","link":"","permalink":"https://jim-shop.github.io/2022/03/07/GITignore%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99%E6%96%B9%E6%B3%95/","excerpt":"","text":".gitignore文件编写方法1. 井号开头的行是注释。1# 井号开头的行是注释。 2. 格式参照shell的glob模式 星号（“*”）匹配0个或任意个字符，问号（“?”）匹配一个任意字符1doc/*.txt # 匹配doc/notes.txt，但不会匹配doc/server/arch.txt 使用两个星号表示匹配任意中间目录1a/**/z #匹配a/z，a/b/c/z等 [abc]匹配任何一个列在方括号中的字符。简写形式[0-3a-c]相当于[0123abc] 3. 其他规则： 默认是递归匹配。 以斜杠（“/”）开头，阻止递归匹配。1/TODO # 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO 以斜杠（“/”）结尾，指定只匹配目录。1build/ # 忽略任何目录下名为 build 的文件夹 以叹号（“!”）开头，表示取反，告诉Git不要忽略这个文件或目录。1!lib.a # 跟踪所有的 lib.a，即便你在前面忽略了 .a 文件","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-01-13T05:18:48.000Z","updated":"2022-01-13T05:28:46.617Z","comments":true,"path":"2022/01/13/hello-world/","link":"","permalink":"https://jim-shop.github.io/2022/01/13/hello-world/","excerpt":"","text":"你好。","categories":[],"tags":[{"name":"hello world","slug":"hello-world","permalink":"https://jim-shop.github.io/tags/hello-world/"}]}],"categories":[],"tags":[{"name":"hello world","slug":"hello-world","permalink":"https://jim-shop.github.io/tags/hello-world/"}]}