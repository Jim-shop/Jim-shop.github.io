{"meta":{"title":"Jim_shop","subtitle":"Github pages","description":"Jim_shop 的 Github pages.","author":"Jim_shop","url":"https://jim-shop.github.io","root":"/"},"pages":[{"title":"Categories","date":"2022-03-07T02:28:41.000Z","updated":"2022-03-07T02:29:03.689Z","comments":true,"path":"categories/index.html","permalink":"https://jim-shop.github.io/categories/","excerpt":"","text":""},{"title":"Tags","date":"2022-03-07T02:25:16.000Z","updated":"2022-03-07T02:25:45.245Z","comments":true,"path":"tags/index.html","permalink":"https://jim-shop.github.io/tags/","excerpt":"","text":""},{"title":"Search","date":"2022-03-07T02:29:20.000Z","updated":"2022-03-07T02:29:34.121Z","comments":true,"path":"search/index.html","permalink":"https://jim-shop.github.io/search/","excerpt":"","text":""},{"title":"关于","date":"2022-03-07T02:28:41.000Z","updated":"2022-03-08T16:11:18.136Z","comments":true,"path":"about/index.html","permalink":"https://jim-shop.github.io/about/","excerpt":"","text":"我要是不给自己找这么多事做不就好了…… 人不是因为做的事情多才优秀，而是因为优秀才能做这么多事……"}],"posts":[{"title":"LTspice使用方法","slug":"LTspice使用方法","date":"2022-03-19T00:09:54.000Z","updated":"2022-03-19T09:45:30.071Z","comments":true,"path":"2022/03/19/LTspice使用方法/","link":"","permalink":"https://jim-shop.github.io/2022/03/19/LTspice%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/","excerpt":"","text":"LTspice XVII 使用方法LTspice 是 ANALOG DEVICES 公司出品的一款免费高性能仿真电路模拟器（Simulation program with integrated circuit emphasis, SPICE）。 一、安装与更新安装方式访问官网下载安装即可。软件自带Analog Devices公司的元件库。 更新方式一般来说软件会自动探测更新，但如果立即需要最新版本的话，可以打开LTspice软件，手动点击菜单栏Tools-&gt;Sync Release触发软件和元件库更新。 二、准备待分析电路使用LTspice软件的其他功能的第一步是要在LTspice软件中有一张原理图。可以从文件中打开现有原理图，也可以创建空白原理图，在LTspice中直接绘制（当然，从文件中打开的原理图也可以在LTspice中编辑）。 打开现有原理图点击菜单栏File-&gt;Open，或点击工具栏上的📂按钮，即可选择现有原理图。LTspice的原理图扩展名为.asc。 在LTspice中绘制点击菜单栏File-&gt;New Schematic，或点击工具栏的📄，或按下快捷键Ctrl+N，即可创建空白原理图。画完记得保存。 1. 插入元件点击工具栏上的元件（或者点击菜单栏Edit下的元件，或者按对应快捷键），将鼠标移动到需要插入元件的位置，点击鼠标左键即可插入，如果元件的方向不对，可以在按下鼠标左键之前按照状态栏上的提示，按Ctrl+E镜像，按Ctrl+R旋转。成功插入一个元件之后，不会自动退出插入模式，可以直接再移动鼠标点击左键等创建另一个元件。插入完毕后按Esc或鼠标右键结束。如果工具栏上找不到需要的元件，可以点击Component（F2）从中选择需要的其他元件。 2. 设定元件属性鼠标移动到元件上方，点击右键，即可设定元件电阻&#x2F;电压等电学属性。支持单位：n,u,m(M),k,MEG,G。 3. 连接元件点击工具栏上的🖊按钮（F3）即可画电线，同样画完按Esc或右键退出。 4. 删除不需要的部分按Delete或F5键进入删除模式，点击或框选被删除的元件即可删除。删除完毕后按Esc或右键退出。 5. 撤销与重做F9撤销，Shift+F9重做。 三、模拟点击工具栏上🏃按钮，即可开始模拟。首次执行模拟会弹出配置界面，一般只输入模拟时间就能开始模拟。进入模拟后会自动打开一个.raw文件，画出所选的测量属性的图。在.raw窗口中拖动鼠标画方框，即可局部放大，按空格则显示全部。 1. 测量电流在原理图中点击被测元件。（鼠标光标应该是一个钳形电流表的形状） 2. 测量电位在原理图中所测位置的导线上点击。（鼠标光标应该是红表笔的形状） 3. 测量电压在原理图中所测的一段所在位置的导线上点下左键，不放手，拖动到所测的另一端所在位置的导线上，松手。前者位置是红表笔，后者位置是黑表笔。（鼠标光标应该是从红表笔拖到黑表笔） 4. 测量功率按下Alt点击原理图中的被测元件。（鼠标光标应该是一个温度计） 查看平均值按下Alt并点击轨迹线标题。 常用快捷键 分类 原理图 元件图 波形图 网表 编辑 ESC退出模式 ESC退出模式 F3导线绘制 F5删除 F5删除 F5删除 F6复制 F6复制 F7移动 F7移动 F8拖拽 F8拖拽 F9撤销 F9撤销 F9撤销 F9撤销 Shift+F9重做 Shift+F9重做 Shift+F9重做 Shift+F9重做 视图 Ctrl+Z视图缩放 Ctrl+Z视图缩放 Ctrl+Z视图缩放 Ctrl+B恢复缩放 Ctrl+B恢复缩放 Ctrl+B恢复缩放 空格显示全部 空格或Ctrl+E显示全部 Ctrl+G显隐网格 Ctrl+G显隐网格 Ctrl+G跳转到行 Ctrl+H暂停模拟 Ctrl+H暂停模拟 Ctrl+H暂停模拟 详见官方指南。 获得更多帮助 可以瞥一眼状态栏。在状态栏上LTspice会提醒当前情况下你按左键&#x2F;右键&#x2F;键盘快捷键能实现什么功能。 工具栏上的工具也可以在菜单栏里面找到，菜单栏里面还会额外提示对应的快捷键。 可以直接在软件中敲下F1，或点击菜单栏的Help选项查看本地帮助。 可以访问LTspice官网查看帮助。","categories":[{"name":"电工","slug":"电工","permalink":"https://jim-shop.github.io/categories/%E7%94%B5%E5%B7%A5/"}],"tags":[{"name":"LTspice","slug":"LTspice","permalink":"https://jim-shop.github.io/tags/LTspice/"}]},{"title":"Mermaid流程图使用","slug":"Mermaid流程图使用","date":"2022-03-07T04:14:57.000Z","updated":"2022-03-07T12:36:01.039Z","comments":true,"path":"2022/03/07/Mermaid流程图使用/","link":"","permalink":"https://jim-shop.github.io/2022/03/07/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE%E4%BD%BF%E7%94%A8/","excerpt":"","text":"flowchart TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2]","categories":[],"tags":[]},{"title":"大物用到的向量叉乘性质","slug":"大物用到的向量叉乘性质","date":"2022-03-07T02:36:16.000Z","updated":"2022-03-16T01:06:21.653Z","comments":true,"path":"2022/03/07/大物用到的向量叉乘性质/","link":"","permalink":"https://jim-shop.github.io/2022/03/07/%E5%A4%A7%E7%89%A9%E7%94%A8%E5%88%B0%E7%9A%84%E5%90%91%E9%87%8F%E5%8F%89%E4%B9%98%E6%80%A7%E8%B4%A8/","excerpt":"","text":"1. 交换$$\\overrightarrow{a}\\times\\overrightarrow{b}&#x3D;-\\overrightarrow{b}\\times\\overrightarrow{a}$$ 2. 分配$$(\\overrightarrow{a}+\\overrightarrow{b})\\times\\overrightarrow{c}&#x3D;\\overrightarrow{a}\\times\\overrightarrow{c}+\\overrightarrow{b}\\times\\overrightarrow{c}$$ 3. 双叉积公式$$\\overrightarrow{a}\\times(\\overrightarrow{b}\\times\\overrightarrow{c})&#x3D;\\overrightarrow{b}(\\overrightarrow{a}\\cdot\\overrightarrow{c})-\\overrightarrow{c}(\\overrightarrow{a}\\cdot\\overrightarrow{b})$$ $$(\\overrightarrow{a}\\times\\overrightarrow{b})\\times\\overrightarrow{c}&#x3D;(\\overrightarrow{a}\\cdot\\overrightarrow{c})\\overrightarrow{b}-(\\overrightarrow{b}\\cdot\\overrightarrow{c})\\overrightarrow{a}$$ 4. 求导$$\\frac{\\text{d}(\\overrightarrow{A}\\times\\overrightarrow{B})}{\\text{d}{t}}&#x3D;\\overrightarrow{A}\\times\\frac{\\text{d}\\overrightarrow{B}}{\\text{d}t}+\\frac{\\text{d}\\overrightarrow{A}}{\\text{d}t}\\times\\overrightarrow{B}$$","categories":[{"name":"大物","slug":"大物","permalink":"https://jim-shop.github.io/categories/%E5%A4%A7%E7%89%A9/"}],"tags":[{"name":"大物","slug":"大物","permalink":"https://jim-shop.github.io/tags/%E5%A4%A7%E7%89%A9/"}]},{"title":"Git协作开发指南","slug":"Git协作开发指南","date":"2022-03-06T18:17:31.000Z","updated":"2022-03-07T03:35:06.753Z","comments":true,"path":"2022/03/07/Git协作开发指南/","link":"","permalink":"https://jim-shop.github.io/2022/03/07/Git%E5%8D%8F%E4%BD%9C%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/","excerpt":"","text":"Git协作开发指南以命令行讲解为主。 现在有很多Git的图形界面客户端，和敲命令行原理上是一样的，只是把输命令的过程给做成了一个个按钮。 概述使用Git进行协作开发的流程一般是 首先从远程服务器拉取最新的主分支 从主分支创建本地新分支，切换到这个新分支上 按常规的方式进行开发 新分支开发有了进展，在新分支内本地提交 开发测试正常后，切换到主分支，整合，推送 1. 拉取12cd 刚克隆下来的仓库路径/git pull 2. 创建并切换到新分支12cd 刚克隆下来的仓库路径/git checkout -b 新分支名（自拟） 3. 开发切换分支后，先暂时不用管Git，直接按照常规的方法进行开发就行了，不认识Git的时候怎么开发，现在就怎么开发。 4. 提交12cd 刚克隆下来的仓库路径/git commit -a 需要提交的文件/目录 -m &quot;关于本次提交的说明（自拟）&quot; 这样就把开发的成果保存到Git版本管理库中了。 需要提交的文件/目录应该有哪些？ 应该只有源代码。你编译出的内容一是可能存在兼容性问题，比如只能在你的电脑上执行，其他电脑上会出现问题，二是为了保持仓库简洁，出于这两点原因，请不要上传。 但是每次手敲文件好麻烦呀！ 其实可以把不需要提交的文件/目录名添加到仓库根目录下的.gitignore文件中，这样这些文件就会被Git忽略。于是就可以使用这条命令： 1git commit -a -m &quot;关于本次提交的说明（自拟）&quot; 把需要提交的文件/目录省略，这代表仓库根目录。这样Git就会把.gitignore文件中记录的文件/目录之外的所有文件添加到Git版本管理库中。 5. 推送开发测试正常后，可以切换到主分支，整合，推送。 1234cd 刚克隆下来的仓库路径/git checkout mastergit merge 之前自拟的新分支名git push 其实不切换到主分支，直接从新分支上向远程推送也是可以的，命令请查阅Git帮助。但是一般来说整合到主分支推送会更方便一点。","categories":[{"name":"Git","slug":"Git","permalink":"https://jim-shop.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://jim-shop.github.io/tags/Git/"}]},{"title":"GITignore文件编写方法","slug":"GITignore文件编写方法","date":"2022-03-06T18:16:49.000Z","updated":"2022-03-07T03:35:11.495Z","comments":true,"path":"2022/03/07/GITignore文件编写方法/","link":"","permalink":"https://jim-shop.github.io/2022/03/07/GITignore%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99%E6%96%B9%E6%B3%95/","excerpt":"","text":".gitignore文件编写方法1. 井号开头的行是注释。1# 井号开头的行是注释。 2. 格式参照shell的glob模式 星号（“*”）匹配0个或任意个字符，问号（“?”）匹配一个任意字符1doc/*.txt # 匹配doc/notes.txt，但不会匹配doc/server/arch.txt 使用两个星号表示匹配任意中间目录1a/**/z #匹配a/z，a/b/c/z等 [abc]匹配任何一个列在方括号中的字符。简写形式[0-3a-c]相当于[0123abc] 3. 其他规则： 默认是递归匹配。 以斜杠（“/”）开头，阻止递归匹配。1/TODO # 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO 以斜杠（“/”）结尾，指定只匹配目录。1build/ # 忽略任何目录下名为 build 的文件夹 以叹号（“!”）开头，表示取反，告诉Git不要忽略这个文件或目录。1!lib.a # 跟踪所有的 lib.a，即便你在前面忽略了 .a 文件","categories":[{"name":"Git","slug":"Git","permalink":"https://jim-shop.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://jim-shop.github.io/tags/Git/"}]}],"categories":[{"name":"电工","slug":"电工","permalink":"https://jim-shop.github.io/categories/%E7%94%B5%E5%B7%A5/"},{"name":"大物","slug":"大物","permalink":"https://jim-shop.github.io/categories/%E5%A4%A7%E7%89%A9/"},{"name":"Git","slug":"Git","permalink":"https://jim-shop.github.io/categories/Git/"}],"tags":[{"name":"LTspice","slug":"LTspice","permalink":"https://jim-shop.github.io/tags/LTspice/"},{"name":"大物","slug":"大物","permalink":"https://jim-shop.github.io/tags/%E5%A4%A7%E7%89%A9/"},{"name":"Git","slug":"Git","permalink":"https://jim-shop.github.io/tags/Git/"}]}