<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mermaid流程图使用</title>
      <link href="/2022/03/07/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/03/07/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<div class="mermaid">flowchart TD  A[Hard] -->|Text| B(Round)  B --> C{Decision}  C -->|One| D[Result 1]  C -->|Two| E[Result 2]</div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大物用到的向量叉乘性质</title>
      <link href="/2022/03/07/%E5%A4%A7%E7%89%A9%E7%94%A8%E5%88%B0%E7%9A%84%E5%90%91%E9%87%8F%E5%8F%89%E4%B9%98%E6%80%A7%E8%B4%A8/"/>
      <url>/2022/03/07/%E5%A4%A7%E7%89%A9%E7%94%A8%E5%88%B0%E7%9A%84%E5%90%91%E9%87%8F%E5%8F%89%E4%B9%98%E6%80%A7%E8%B4%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-交换"><a href="#1-交换" class="headerlink" title="1. 交换"></a>1. 交换</h2><p>$$<br>\overrightarrow{a}\times\overrightarrow{b}<br>&#x3D;-\overrightarrow{b}\times\overrightarrow{a}<br>$$</p><h2 id="2-分配"><a href="#2-分配" class="headerlink" title="2. 分配"></a>2. 分配</h2><p>$$<br>(\overrightarrow{a}+\overrightarrow{b})\times\overrightarrow{c}<br>&#x3D;\overrightarrow{a}\times\overrightarrow{c}<br>+\overrightarrow{b}\times\overrightarrow{c}<br>$$</p><h2 id="3-双叉积公式"><a href="#3-双叉积公式" class="headerlink" title="3. 双叉积公式"></a>3. 双叉积公式</h2><p>$$<br>\overrightarrow{a}\times(\overrightarrow{b}\times\overrightarrow{c})<br>&#x3D;\overrightarrow{b}(\overrightarrow{a}\cdot\overrightarrow{c})<br>-\overrightarrow{c}(\overrightarrow{a}\cdot\overrightarrow{b})<br>$$</p><p>$$<br>(\overrightarrow{a}\times\overrightarrow{b})\times\overrightarrow{c}<br>&#x3D;(\overrightarrow{a}\cdot\overrightarrow{c})\overrightarrow{b}<br>-(\overrightarrow{b}\cdot\overrightarrow{c})\overrightarrow{a}<br>$$</p><ol start="4"><li>求导</li></ol><p>$$<br>\frac{\text{d}(\overrightarrow{A}\times\overrightarrow{B})}{\text{d}{t}}<br>&#x3D;\overrightarrow{A}\times\frac{\text{d}\overrightarrow{B}}{\text{d}t}<br>+\frac{\text{d}\overrightarrow{A}}{\text{d}t}\times\overrightarrow{B}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 大物 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大物 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git协作开发指南</title>
      <link href="/2022/03/07/Git%E5%8D%8F%E4%BD%9C%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
      <url>/2022/03/07/Git%E5%8D%8F%E4%BD%9C%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="Git协作开发指南"><a href="#Git协作开发指南" class="headerlink" title="Git协作开发指南"></a>Git协作开发指南</h1><p>以命令行讲解为主。</p><p>现在有很多Git的图形界面客户端，和敲命令行原理上是一样的，只是把输命令的过程给做成了一个个按钮。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>使用Git进行协作开发的流程一般是</p><ol><li>首先从远程服务器拉取最新的主分支</li><li>从主分支创建本地新分支，切换到这个新分支上</li><li>按常规的方式进行开发</li><li>新分支开发有了进展，在新分支内本地提交</li><li>开发测试正常后，切换到主分支，整合，推送</li></ol><h2 id="1-拉取"><a href="#1-拉取" class="headerlink" title="1. 拉取"></a>1. 拉取</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 刚克隆下来的仓库路径/</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="2-创建并切换到新分支"><a href="#2-创建并切换到新分支" class="headerlink" title="2. 创建并切换到新分支"></a>2. 创建并切换到新分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 刚克隆下来的仓库路径/</span><br><span class="line">git checkout -b 新分支名（自拟）</span><br></pre></td></tr></table></figure><h2 id="3-开发"><a href="#3-开发" class="headerlink" title="3. 开发"></a>3. 开发</h2><p>切换分支后，先暂时不用管Git，直接按照常规的方法进行开发就行了，不认识Git的时候怎么开发，现在就怎么开发。</p><h2 id="4-提交"><a href="#4-提交" class="headerlink" title="4. 提交"></a>4. 提交</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 刚克隆下来的仓库路径/</span><br><span class="line">git commit -a 需要提交的文件/目录 -m <span class="string">&quot;关于本次提交的说明（自拟）&quot;</span></span><br></pre></td></tr></table></figure><p>这样就把开发的成果保存到Git版本管理库中了。</p><blockquote><p><code>需要提交的文件/目录</code>应该有哪些？</p><p>应该只有源代码。你编译出的内容一是可能存在兼容性问题，比如只能在你的电脑上执行，其他电脑上会出现问题，二是为了保持仓库简洁，出于这两点原因，请不要上传。</p></blockquote><blockquote><p><strong>但是每次手敲文件好麻烦呀！</strong></p><p>其实可以把不需要提交的文件/目录名添加到仓库根目录下的<code>.gitignore</code>文件中，这样这些文件就会被Git忽略。<br>于是就可以使用这条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -a -m <span class="string">&quot;关于本次提交的说明（自拟）&quot;</span></span><br></pre></td></tr></table></figure><p>把<code>需要提交的文件/目录</code>省略，这代表仓库根目录。<br>这样Git就会把<code>.gitignore</code>文件中记录的文件/目录之外的所有文件添加到Git版本管理库中。</p></blockquote><h2 id="5-推送"><a href="#5-推送" class="headerlink" title="5. 推送"></a>5. 推送</h2><p>开发测试正常后，可以切换到主分支，整合，推送。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd 刚克隆下来的仓库路径/</span><br><span class="line">git checkout master</span><br><span class="line">git merge 之前自拟的新分支名</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><blockquote><p>其实不切换到主分支，直接从新分支上向远程推送也是可以的，命令请查阅Git帮助。但是一般来说整合到主分支推送会更方便一点。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GITignore文件编写方法</title>
      <link href="/2022/03/07/GITignore%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99%E6%96%B9%E6%B3%95/"/>
      <url>/2022/03/07/GITignore%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="gitignore文件编写方法"><a href="#gitignore文件编写方法" class="headerlink" title=".gitignore文件编写方法"></a>.gitignore文件编写方法</h1><h2 id="1-井号开头的行是注释。"><a href="#1-井号开头的行是注释。" class="headerlink" title="1. 井号开头的行是注释。"></a>1. 井号开头的行是注释。</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 井号开头的行是注释。</span></span><br></pre></td></tr></table></figure><h2 id="2-格式参照shell的glob模式"><a href="#2-格式参照shell的glob模式" class="headerlink" title="2. 格式参照shell的glob模式"></a>2. 格式参照shell的glob模式</h2><ul><li>星号（“*”）匹配0个或任意个字符，问号（“?”）匹配一个任意字符<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doc/*.txt <span class="comment"># 匹配doc/notes.txt，但不会匹配doc/server/arch.txt</span></span><br></pre></td></tr></table></figure></li><li>使用两个星号表示匹配任意中间目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a/**/z <span class="comment">#匹配a/z，a/b/c/z等</span></span><br></pre></td></tr></table></figure></li><li>[abc]匹配任何一个列在方括号中的字符。<br>简写形式[0-3a-c]相当于[0123abc]</li></ul><h2 id="3-其他规则："><a href="#3-其他规则：" class="headerlink" title="3. 其他规则："></a>3. 其他规则：</h2><ul><li>默认是递归匹配。</li><li>以斜杠（“/”）开头，阻止递归匹配。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/TODO <span class="comment"># 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span></span><br></pre></td></tr></table></figure></li><li>以斜杠（“/”）结尾，指定只匹配目录。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build/  <span class="comment"># 忽略任何目录下名为 build 的文件夹</span></span><br></pre></td></tr></table></figure></li><li>以叹号（“!”）开头，表示取反，告诉Git不要忽略这个文件或目录。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!lib.a  <span class="comment"># 跟踪所有的 lib.a，即便你在前面忽略了 .a 文件</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
